{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from './config';\nconst api = axios.create({\n  baseURL: API_URL\n});\nconst getWithCache = async (url, options = {}) => {\n  const cacheKey = `${url}-${JSON.stringify(options)}`;\n  const cachedResponse = localStorage.getItem(cacheKey);\n  if (cachedResponse && options.method === 'get') {\n    const cachedData = JSON.parse(cachedResponse);\n    const expirationTime = cachedData.expirationTime;\n    if (new Date() < new Date(expirationTime)) {\n      return cachedData.response;\n    } else {\n      localStorage.removeItem(cacheKey);\n    }\n  }\n  try {\n    const response = await api({\n      method: options.method || 'get',\n      url,\n      ...options\n    });\n    if (options.method === 'get') {\n      const expirationTime = new Date(new Date().getTime() + 5 * 60000); // Durée de cache (5 minutes)\n      localStorage.setItem(cacheKey, JSON.stringify({\n        response,\n        expirationTime\n      }));\n    }\n    return response;\n  } catch (error) {\n    console.error(\"Error fetching data:\", error);\n    throw error;\n  }\n};\nexport { getWithCache };","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","getWithCache","url","options","cacheKey","JSON","stringify","cachedResponse","localStorage","getItem","method","cachedData","parse","expirationTime","Date","response","removeItem","getTime","setItem","error","console"],"sources":["C:/Users/gongue/Desktop/frontsbs/src/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_URL } from './config';\r\n\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n});\r\n\r\nconst getWithCache = async (url, options = {}) => {\r\n    const cacheKey = `${url}-${JSON.stringify(options)}`;\r\n    const cachedResponse = localStorage.getItem(cacheKey);\r\n\r\n    if (cachedResponse && options.method === 'get') {\r\n        const cachedData = JSON.parse(cachedResponse);\r\n        const expirationTime = cachedData.expirationTime;\r\n\r\n        if (new Date() < new Date(expirationTime)) {\r\n            return cachedData.response;\r\n        } else {\r\n            localStorage.removeItem(cacheKey);\r\n        }\r\n    }\r\n\r\n    try {\r\n        const response = await api({\r\n            method: options.method || 'get',\r\n            url,\r\n            ...options,\r\n        });\r\n\r\n        if (options.method === 'get') {\r\n            const expirationTime = new Date(new Date().getTime() + 5 * 60000); // Durée de cache (5 minutes)\r\n            localStorage.setItem(cacheKey, JSON.stringify({ response, expirationTime }));\r\n        }\r\n\r\n        return response;\r\n    } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        throw error;\r\n    }\r\n};\r\n\r\nexport { getWithCache };\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,UAAU;AAElC,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAEH;AACb,CAAC,CAAC;AAEF,MAAMI,YAAY,GAAG,MAAAA,CAAOC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EAC9C,MAAMC,QAAQ,GAAG,GAAGF,GAAG,IAAIG,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC,EAAE;EACpD,MAAMI,cAAc,GAAGC,YAAY,CAACC,OAAO,CAACL,QAAQ,CAAC;EAErD,IAAIG,cAAc,IAAIJ,OAAO,CAACO,MAAM,KAAK,KAAK,EAAE;IAC5C,MAAMC,UAAU,GAAGN,IAAI,CAACO,KAAK,CAACL,cAAc,CAAC;IAC7C,MAAMM,cAAc,GAAGF,UAAU,CAACE,cAAc;IAEhD,IAAI,IAAIC,IAAI,CAAC,CAAC,GAAG,IAAIA,IAAI,CAACD,cAAc,CAAC,EAAE;MACvC,OAAOF,UAAU,CAACI,QAAQ;IAC9B,CAAC,MAAM;MACHP,YAAY,CAACQ,UAAU,CAACZ,QAAQ,CAAC;IACrC;EACJ;EAEA,IAAI;IACA,MAAMW,QAAQ,GAAG,MAAMjB,GAAG,CAAC;MACvBY,MAAM,EAAEP,OAAO,CAACO,MAAM,IAAI,KAAK;MAC/BR,GAAG;MACH,GAAGC;IACP,CAAC,CAAC;IAEF,IAAIA,OAAO,CAACO,MAAM,KAAK,KAAK,EAAE;MAC1B,MAAMG,cAAc,GAAG,IAAIC,IAAI,CAAC,IAAIA,IAAI,CAAC,CAAC,CAACG,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC;MACnET,YAAY,CAACU,OAAO,CAACd,QAAQ,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAES,QAAQ;QAAEF;MAAe,CAAC,CAAC,CAAC;IAChF;IAEA,OAAOE,QAAQ;EACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;AAED,SAASlB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}